{"version":3,"sources":["Card.js","CardList.js","Searchbox.js","Scroll.js","ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","map","user","i","key","Searchbox","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","searchfield","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ec3f9d29.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\treturn ( \r\n\t\t<div className = 'bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 '>\r\n\t\t\t<img  alt = 'robots' src = {`https:robohash.org/${props.id}?size=200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{props.name}</h2>\r\n\t\t\t\t<p>{props.email}</p>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t</div>\t\r\n\r\n\r\n\t\t);\r\n\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\n \r\n\r\n\t\t\r\n\tconst CardList = ({robots}) => {\r\n\t\treturn(\r\n\t\t\r\n\t\t<div>\r\n\t\t{ robots.map((user,i) =>{\r\n\t\t\r\n\t\treturn (\t<Card  key={i}  id ={robots[i].id} name = {robots[i].name} email = {robots[i].email} />\r\n\t\t\t);\r\n\t\t\t})\r\n\t\t\t\r\n\r\n\t}\r\n\t</div>\r\n\r\n\t);\t\r\n}\t\t\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Searchbox = ({ searchChange}) => {\r\n\treturn (\r\n\t\t<div >\r\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='search robots' onChange = {searchChange} />\r\n\r\n\r\n\t\t</div>\r\n\r\n\t\t)\r\n}\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React ,{ Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor (props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError : false\r\n\t\t}\r\n\r\n\t}\r\n\r\ncomponentDidCatch(error,info) {\r\n\tthis.setState({ hasError : true })\r\n}\r\n\r\nrender() {\r\n\tif(this.state.hasError) {\r\n\t\treturn <h1>ooopss!!! something went wrong </h1>\r\n\r\n\t}\r\n\treturn this.props.children\r\n}\r\n\r\n}\r\nexport default ErrorBoundary;","import React , {Component}  from 'react';\r\nimport CardList from './CardList';\r\nimport Searchbox from './Searchbox';\r\nimport Scroll from './Scroll';\r\nimport ErrorBoundary from './ErrorBoundary' \r\nimport './App.css';\r\n\r\n\r\nclass  App extends Component  {\r\n\r\nconstructor() {\r\n\tsuper()\r\n\tthis.state = {\r\n\t\trobots : [],\r\n\t\tsearchfield : ''\r\n\r\n\t}\r\n}\r\n\r\n\r\ncomponentDidMount() {\r\n\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response=> response.json())\r\n      .then(users => {this.setState({ robots: users})});\r\n  \r\n\r\n}\r\n\r\n\r\n\r\n\r\nonSearchChange = (event) =>{\r\n\tthis.setState({'searchfield' : event.target.value })\r\n\t\r\n\t\r\n\r\n}\r\n\r\n\r\nrender() {\r\n\tconst filteredRobots = this.state.robots.filter(robots =>{\r\n\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n\t})\t\r\n\tif (this.state.robots.length === 0 ) {\r\n\t\treturn <h1>loading...</h1>\r\n\t}\r\n\telse {return(\r\n\t\t<div className = 'tc'>\r\n\t\t\t<h1 className= 'f1'>robofriends</h1>\r\n\t\t\t<Searchbox searchChange={this.onSearchChange} />\r\n\t\t\t<Scroll>\r\n\t\t\t\t<ErrorBoundary>\r\n\r\n\t\t\t\t\t<CardList robots= {filteredRobots}/>\r\n\t\t\t\t</ErrorBoundary>\t\r\n\t\t\t</Scroll> \r\n\t\t</div>\t\r\n\r\n\r\n\t\t);} \r\n\r\n\r\n \t\r\n}\r\n\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App'\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\n\r\nReactDOM.render(<App />,document.getElementById('root')\r\n);\r\nserviceWorker.register()\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n\r\n"],"sourceRoot":""}